#!/usr/bin/python

'''
# This script is used to read all csv files and construct tables for q3 and q4
# schema: <userId, numOfTweets, list of retweeted UserIds>
# 
# To run this script
# 1. make sure you hava generated csv file list first using "s3cmd ls S3://15619twitter > fileList.csv" first!
# 2. make sure manually create a file named "result" (no suffix) under the folder of this script
#
# Estimated size of hashTable: 1.5G
#
# REMINDER: please modify me according to the new schema.
#
'''

import re
import sys
import json
import csv
#from boto.s3.connection import S3Connection
import urllib


# value class for dict value, keep numOfTweet and listOfRetweetUserId
class ValueClass(object):
    def __init__(self, numOfTweets = 1, listOfRetweetUserId = None):
        self.numOfTweets = numOfTweets
        self.listOfRetweetUserId = listOfRetweetUserId

    def increase(self):
        self.numOfTweets = self.numOfTweets + 1

    def addNewUserId(self, userId):
        self.listOfRetweetUserId.append(int(userId))



# list of file s3 urls of tweet json
tweet_file_list = []
# in-memory structure to store [id, numOfTweet, listOfRetweetUserId]
table = {}


# fetch csv file generated by s3cmd ls
csvFile = open('fileList.csv', 'r')

for line in csvFile:
    m = re.search(r"s3://(.+json)", line)
    s3url = "https://s3.amazonaws.com/" + m.group(1)
    tweet_file_list.append(s3url)

csvFile.close()

opener = urllib.URLopener()

# iterate all files
for s3url in tweet_file_list:
    tweet_file = opener.open(s3url)

    for json_line in tweet_file:
        try:
            decoded_data = json.loads(json_line)
        except ValueError:
            continue

        userId = int(decoded_data['id'])

        if userId in table:
            table[userId].increase()
        else:
            newUser = ValueClass(1, [])
            table[userId] = newUser

        if 'retweeted_status' in decoded_data:
            originalId = int(decoded_data['retweeted_status']['id'])

            if originalId in table:
                table[originalId].addNewUserId(userId)
            else:
                newUser = ValueClass(0, [userId])
                table[originalId] = newUser

    tweet_file.close()



# open a file to write the result
outputFile = open('result', 'w')

for itemKey in table:
    outputFile.write("%d %d %s\n" % (itemKey, table[itemKey].numOfTweets, table[itemKey].listOfRetweetUserId))





